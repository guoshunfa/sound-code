package com.sun.java.swing.plaf.motif;

import java.awt.Color;
import javax.swing.UIDefaults;
import javax.swing.plaf.BorderUIResource;
import javax.swing.plaf.ColorUIResource;
import javax.swing.plaf.FontUIResource;
import javax.swing.plaf.InsetsUIResource;
import javax.swing.plaf.basic.BasicBorders;
import javax.swing.plaf.basic.BasicLookAndFeel;
import sun.awt.OSInfo;
import sun.swing.SwingUtilities2;

public class MotifLookAndFeel extends BasicLookAndFeel {
   public String getName() {
      return "CDE/Motif";
   }

   public String getID() {
      return "Motif";
   }

   public String getDescription() {
      return "The CDE/Motif Look and Feel";
   }

   public boolean isNativeLookAndFeel() {
      return OSInfo.getOSType() == OSInfo.OSType.SOLARIS;
   }

   public boolean isSupportedLookAndFeel() {
      return true;
   }

   protected void initSystemColorDefaults(UIDefaults var1) {
      String[] var2 = new String[]{"desktop", "#005C5C", "activeCaption", "#000080", "activeCaptionText", "#FFFFFF", "activeCaptionBorder", "#B24D7A", "inactiveCaption", "#AEB2C3", "inactiveCaptionText", "#000000", "inactiveCaptionBorder", "#AEB2C3", "window", "#AEB2C3", "windowBorder", "#AEB2C3", "windowText", "#000000", "menu", "#AEB2C3", "menuText", "#000000", "text", "#FFF7E9", "textText", "#000000", "textHighlight", "#000000", "textHighlightText", "#FFF7E9", "textInactiveText", "#808080", "control", "#AEB2C3", "controlText", "#000000", "controlHighlight", "#DCDEE5", "controlLtHighlight", "#DCDEE5", "controlShadow", "#63656F", "controlLightShadow", "#9397A5", "controlDkShadow", "#000000", "scrollbar", "#AEB2C3", "info", "#FFF7E9", "infoText", "#000000"};
      this.loadSystemColors(var1, var2, false);
   }

   protected void initClassDefaults(UIDefaults var1) {
      super.initClassDefaults(var1);
      String var2 = "com.sun.java.swing.plaf.motif.";
      Object[] var3 = new Object[]{"ButtonUI", var2 + "MotifButtonUI", "CheckBoxUI", var2 + "MotifCheckBoxUI", "DirectoryPaneUI", var2 + "MotifDirectoryPaneUI", "FileChooserUI", var2 + "MotifFileChooserUI", "LabelUI", var2 + "MotifLabelUI", "MenuBarUI", var2 + "MotifMenuBarUI", "MenuUI", var2 + "MotifMenuUI", "MenuItemUI", var2 + "MotifMenuItemUI", "CheckBoxMenuItemUI", var2 + "MotifCheckBoxMenuItemUI", "RadioButtonMenuItemUI", var2 + "MotifRadioButtonMenuItemUI", "RadioButtonUI", var2 + "MotifRadioButtonUI", "ToggleButtonUI", var2 + "MotifToggleButtonUI", "PopupMenuUI", var2 + "MotifPopupMenuUI", "ProgressBarUI", var2 + "MotifProgressBarUI", "ScrollBarUI", var2 + "MotifScrollBarUI", "ScrollPaneUI", var2 + "MotifScrollPaneUI", "SliderUI", var2 + "MotifSliderUI", "SplitPaneUI", var2 + "MotifSplitPaneUI", "TabbedPaneUI", var2 + "MotifTabbedPaneUI", "TextAreaUI", var2 + "MotifTextAreaUI", "TextFieldUI", var2 + "MotifTextFieldUI", "PasswordFieldUI", var2 + "MotifPasswordFieldUI", "TextPaneUI", var2 + "MotifTextPaneUI", "EditorPaneUI", var2 + "MotifEditorPaneUI", "TreeUI", var2 + "MotifTreeUI", "InternalFrameUI", var2 + "MotifInternalFrameUI", "DesktopPaneUI", var2 + "MotifDesktopPaneUI", "SeparatorUI", var2 + "MotifSeparatorUI", "PopupMenuSeparatorUI", var2 + "MotifPopupMenuSeparatorUI", "OptionPaneUI", var2 + "MotifOptionPaneUI", "ComboBoxUI", var2 + "MotifComboBoxUI", "DesktopIconUI", var2 + "MotifDesktopIconUI"};
      var1.putDefaults(var3);
   }

   private void initResourceBundle(UIDefaults var1) {
      var1.addResourceBundle("com.sun.java.swing.plaf.motif.resources.motif");
   }

   protected void initComponentDefaults(UIDefaults var1) {
      super.initComponentDefaults(var1);
      this.initResourceBundle(var1);
      FontUIResource var2 = new FontUIResource("Dialog", 0, 12);
      FontUIResource var3 = new FontUIResource("Serif", 0, 12);
      FontUIResource var4 = new FontUIResource("SansSerif", 0, 12);
      FontUIResource var5 = new FontUIResource("Monospaced", 0, 12);
      ColorUIResource var6 = new ColorUIResource(Color.red);
      ColorUIResource var7 = new ColorUIResource(Color.black);
      ColorUIResource var8 = new ColorUIResource(Color.white);
      ColorUIResource var9 = new ColorUIResource(Color.lightGray);
      ColorUIResource var10 = new ColorUIResource(147, 151, 165);
      ColorUIResource var12 = new ColorUIResource(165, 165, 165);
      ColorUIResource var13 = new ColorUIResource(0, 0, 0);
      MotifBorders.BevelBorder var14 = new MotifBorders.BevelBorder(false, var1.getColor("controlShadow"), var1.getColor("controlLtHighlight"));
      MotifBorders.BevelBorder var15 = new MotifBorders.BevelBorder(true, var1.getColor("controlShadow"), var1.getColor("controlLtHighlight"));
      BasicBorders.MarginBorder var16 = new BasicBorders.MarginBorder();
      MotifBorders.FocusBorder var17 = new MotifBorders.FocusBorder(var1.getColor("control"), var1.getColor("activeCaptionBorder"));
      BorderUIResource.CompoundBorderUIResource var18 = new BorderUIResource.CompoundBorderUIResource(var17, var14);
      BorderUIResource.CompoundBorderUIResource var19 = new BorderUIResource.CompoundBorderUIResource(var17, var15);
      BorderUIResource.CompoundBorderUIResource var20 = new BorderUIResource.CompoundBorderUIResource(new MotifBorders.ButtonBorder(var1.getColor("Button.shadow"), var1.getColor("Button.highlight"), var1.getColor("Button.darkShadow"), var1.getColor("activeCaptionBorder")), var16);
      BorderUIResource.CompoundBorderUIResource var21 = new BorderUIResource.CompoundBorderUIResource(new MotifBorders.ToggleButtonBorder(var1.getColor("ToggleButton.shadow"), var1.getColor("ToggleButton.highlight"), var1.getColor("ToggleButton.darkShadow"), var1.getColor("activeCaptionBorder")), var16);
      BorderUIResource.CompoundBorderUIResource var22 = new BorderUIResource.CompoundBorderUIResource(var18, var16);
      BorderUIResource.CompoundBorderUIResource var23 = new BorderUIResource.CompoundBorderUIResource(var15, new MotifBorders.MotifPopupMenuBorder(var1.getFont("PopupMenu.font"), var1.getColor("PopupMenu.background"), var1.getColor("PopupMenu.foreground"), var1.getColor("controlShadow"), var1.getColor("controlLtHighlight")));
      UIDefaults.LazyValue var24 = new UIDefaults.LazyValue() {
         public Object createValue(UIDefaults var1) {
            return MotifIconFactory.getMenuItemCheckIcon();
         }
      };
      UIDefaults.LazyValue var25 = new UIDefaults.LazyValue() {
         public Object createValue(UIDefaults var1) {
            return MotifIconFactory.getMenuItemArrowIcon();
         }
      };
      UIDefaults.LazyValue var26 = new UIDefaults.LazyValue() {
         public Object createValue(UIDefaults var1) {
            return MotifIconFactory.getMenuArrowIcon();
         }
      };
      UIDefaults.LazyValue var27 = new UIDefaults.LazyValue() {
         public Object createValue(UIDefaults var1) {
            return MotifIconFactory.getCheckBoxIcon();
         }
      };
      UIDefaults.LazyValue var28 = new UIDefaults.LazyValue() {
         public Object createValue(UIDefaults var1) {
            return MotifIconFactory.getRadioButtonIcon();
         }
      };
      UIDefaults.LazyValue var29 = new UIDefaults.LazyValue() {
         public Object createValue(UIDefaults var1) {
            Color var2 = var1.getColor("control");
            return new ColorUIResource(Math.max((int)((double)var2.getRed() * 0.85D), 0), Math.max((int)((double)var2.getGreen() * 0.85D), 0), Math.max((int)((double)var2.getBlue() * 0.85D), 0));
         }
      };
      UIDefaults.LazyValue var30 = new UIDefaults.LazyValue() {
         public Object createValue(UIDefaults var1) {
            Color var2 = var1.getColor("controlText");
            return new ColorUIResource(Math.max((int)((double)var2.getRed() * 0.85D), 0), Math.max((int)((double)var2.getGreen() * 0.85D), 0), Math.max((int)((double)var2.getBlue() * 0.85D), 0));
         }
      };
      UIDefaults.LazyValue var31 = new UIDefaults.LazyValue() {
         public Object createValue(UIDefaults var1) {
            Color var2 = var1.getColor("control");
            Color var3 = new Color(Math.max((int)((double)var2.getRed() * 0.85D), 0), Math.max((int)((double)var2.getGreen() * 0.85D), 0), Math.max((int)((double)var2.getBlue() * 0.85D), 0));
            return new ColorUIResource(var3.darker());
         }
      };
      UIDefaults.LazyValue var32 = new UIDefaults.LazyValue() {
         public Object createValue(UIDefaults var1) {
            Color var2 = var1.getColor("control");
            Color var3 = new Color(Math.max((int)((double)var2.getRed() * 0.85D), 0), Math.max((int)((double)var2.getGreen() * 0.85D), 0), Math.max((int)((double)var2.getBlue() * 0.85D), 0));
            return new ColorUIResource(var3.brighter());
         }
      };
      UIDefaults.LazyInputMap var33 = new UIDefaults.LazyInputMap(new Object[]{"COPY", "copy-to-clipboard", "PASTE", "paste-from-clipboard", "CUT", "cut-to-clipboard", "control INSERT", "copy-to-clipboard", "shift INSERT", "paste-from-clipboard", "shift DELETE", "cut-to-clipboard", "control F", "caret-forward", "control B", "caret-backward", "control D", "delete-next", "BACK_SPACE", "delete-previous", "shift BACK_SPACE", "delete-previous", "ctrl H", "delete-previous", "DELETE", "delete-next", "ctrl DELETE", "delete-next-word", "ctrl BACK_SPACE", "delete-previous-word", "RIGHT", "caret-forward", "LEFT", "caret-backward", "KP_RIGHT", "caret-forward", "KP_LEFT", "caret-backward", "shift LEFT", "selection-backward", "shift RIGHT", "selection-forward", "control LEFT", "caret-previous-word", "control RIGHT", "caret-next-word", "control shift LEFT", "selection-previous-word", "control shift RIGHT", "selection-next-word", "control SLASH", "select-all", "HOME", "caret-begin-line", "END", "caret-end-line", "shift HOME", "selection-begin-line", "shift END", "selection-end-line", "control BACK_SLASH", "unselect", "ENTER", "notify-field-accept", "control shift O", "toggle-componentOrientation"});
      UIDefaults.LazyInputMap var34 = new UIDefaults.LazyInputMap(new Object[]{"COPY", "copy-to-clipboard", "PASTE", "paste-from-clipboard", "CUT", "cut-to-clipboard", "control INSERT", "copy-to-clipboard", "shift INSERT", "paste-from-clipboard", "shift DELETE", "cut-to-clipboard", "control F", "caret-forward", "control B", "caret-backward", "control D", "delete-next", "BACK_SPACE", "delete-previous", "shift BACK_SPACE", "delete-previous", "ctrl H", "delete-previous", "DELETE", "delete-next", "RIGHT", "caret-forward", "LEFT", "caret-backward", "KP_RIGHT", "caret-forward", "KP_LEFT", "caret-backward", "shift LEFT", "selection-backward", "shift RIGHT", "selection-forward", "control LEFT", "caret-begin-line", "control RIGHT", "caret-end-line", "control shift LEFT", "selection-begin-line", "control shift RIGHT", "selection-end-line", "control SLASH", "select-all", "HOME", "caret-begin-line", "END", "caret-end-line", "shift HOME", "selection-begin-line", "shift END", "selection-end-line", "control BACK_SLASH", "unselect", "ENTER", "notify-field-accept", "control shift O", "toggle-componentOrientation"});
      UIDefaults.LazyInputMap var35 = new UIDefaults.LazyInputMap(new Object[]{"COPY", "copy-to-clipboard", "PASTE", "paste-from-clipboard", "CUT", "cut-to-clipboard", "control INSERT", "copy-to-clipboard", "shift INSERT", "paste-from-clipboard", "shift DELETE", "cut-to-clipboard", "control F", "caret-forward", "control B", "caret-backward", "control D", "delete-next", "BACK_SPACE", "delete-previous", "shift BACK_SPACE", "delete-previous", "ctrl H", "delete-previous", "DELETE", "delete-next", "ctrl DELETE", "delete-next-word", "ctrl BACK_SPACE", "delete-previous-word", "RIGHT", "caret-forward", "LEFT", "caret-backward", "KP_RIGHT", "caret-forward", "KP_LEFT", "caret-backward", "shift LEFT", "selection-backward", "shift RIGHT", "selection-forward", "control LEFT", "caret-previous-word", "control RIGHT", "caret-next-word", "control shift LEFT", "selection-previous-word", "control shift RIGHT", "selection-next-word", "control SLASH", "select-all", "HOME", "caret-begin-line", "END", "caret-end-line", "shift HOME", "selection-begin-line", "shift END", "selection-end-line", "control N", "caret-down", "control P", "caret-up", "UP", "caret-up", "DOWN", "caret-down", "PAGE_UP", "page-up", "PAGE_DOWN", "page-down", "shift PAGE_UP", "selection-page-up", "shift PAGE_DOWN", "selection-page-down", "ctrl shift PAGE_UP", "selection-page-left", "ctrl shift PAGE_DOWN", "selection-page-right", "shift UP", "selection-up", "shift DOWN", "selection-down", "ENTER", "insert-break", "TAB", "insert-tab", "control BACK_SLASH", "unselect", "control HOME", "caret-begin", "control END", "caret-end", "control shift HOME", "selection-begin", "control shift END", "selection-end", "control T", "next-link-action", "control shift T", "previous-link-action", "control SPACE", "activate-link-action", "control shift O", "toggle-componentOrientation"});
      Object var36 = SwingUtilities2.makeIcon(this.getClass(), MotifLookAndFeel.class, "icons/TreeOpen.gif");
      Object var37 = SwingUtilities2.makeIcon(this.getClass(), MotifLookAndFeel.class, "icons/TreeClosed.gif");
      UIDefaults.LazyValue var38 = new UIDefaults.LazyValue() {
         public Object createValue(UIDefaults var1) {
            return MotifTreeCellRenderer.loadLeafIcon();
         }
      };
      UIDefaults.LazyValue var39 = new UIDefaults.LazyValue() {
         public Object createValue(UIDefaults var1) {
            return MotifTreeUI.MotifExpandedIcon.createExpandedIcon();
         }
      };
      UIDefaults.LazyValue var40 = new UIDefaults.LazyValue() {
         public Object createValue(UIDefaults var1) {
            return MotifTreeUI.MotifCollapsedIcon.createCollapsedIcon();
         }
      };
      MotifBorders.MenuBarBorder var41 = new MotifBorders.MenuBarBorder(var1.getColor("MenuBar.shadow"), var1.getColor("MenuBar.highlight"), var1.getColor("MenuBar.darkShadow"), var1.getColor("activeCaptionBorder"));
      BorderUIResource.CompoundBorderUIResource var42 = new BorderUIResource.CompoundBorderUIResource(var14, var16);
      BorderUIResource.LineBorderUIResource var43 = new BorderUIResource.LineBorderUIResource(var1.getColor("activeCaptionBorder"));
      InsetsUIResource var44 = new InsetsUIResource(0, 0, 0, 0);
      InsetsUIResource var45 = new InsetsUIResource(3, 4, 3, 4);
      InsetsUIResource var46 = new InsetsUIResource(3, 0, 1, 0);
      InsetsUIResource var47 = new InsetsUIResource(4, 2, 0, 8);
      InsetsUIResource var48 = new InsetsUIResource(2, 2, 2, 2);
      BorderUIResource.EmptyBorderUIResource var49 = new BorderUIResource.EmptyBorderUIResource(10, 0, 0, 0);
      BorderUIResource.EmptyBorderUIResource var50 = new BorderUIResource.EmptyBorderUIResource(10, 10, 10, 10);
      BorderUIResource.EmptyBorderUIResource var51 = new BorderUIResource.EmptyBorderUIResource(10, 10, 12, 10);
      Object[] var52 = new Object[]{"Desktop.background", var1.get("desktop"), "Desktop.ancestorInputMap", new UIDefaults.LazyInputMap(new Object[]{"ctrl F5", "restore", "ctrl F4", "close", "ctrl F7", "move", "ctrl F8", "resize", "RIGHT", "right", "KP_RIGHT", "right", "shift RIGHT", "shrinkRight", "shift KP_RIGHT", "shrinkRight", "LEFT", "left", "KP_LEFT", "left", "shift LEFT", "shrinkLeft", "shift KP_LEFT", "shrinkLeft", "UP", "up", "KP_UP", "up", "shift UP", "shrinkUp", "shift KP_UP", "shrinkUp", "DOWN", "down", "KP_DOWN", "down", "shift DOWN", "shrinkDown", "shift KP_DOWN", "shrinkDown", "ESCAPE", "escape", "ctrl F9", "minimize", "ctrl F10", "maximize", "ctrl F6", "selectNextFrame", "ctrl TAB", "selectNextFrame", "ctrl alt F6", "selectNextFrame", "shift ctrl alt F6", "selectPreviousFrame", "ctrl F12", "navigateNext", "shift ctrl F12", "navigatePrevious"}), "Panel.background", var1.get("control"), "Panel.foreground", var1.get("textText"), "Panel.font", var2, "ProgressBar.font", var2, "ProgressBar.foreground", var10, "ProgressBar.background", var1.get("control"), "ProgressBar.selectionForeground", var1.get("control"), "ProgressBar.selectionBackground", var1.get("controlText"), "ProgressBar.border", var14, "ProgressBar.cellLength", new Integer(6), "ProgressBar.cellSpacing", 0, "Button.margin", new InsetsUIResource(2, 4, 2, 4), "Button.border", var20, "Button.background", var1.get("control"), "Button.foreground", var1.get("controlText"), "Button.select", var1.get("controlLightShadow"), "Button.font", var2, "Button.focusInputMap", new UIDefaults.LazyInputMap(new Object[]{"SPACE", "pressed", "released SPACE", "released"}), "CheckBox.textIconGap", new Integer(8), "CheckBox.margin", new InsetsUIResource(4, 2, 4, 2), "CheckBox.icon", var27, "CheckBox.focus", var1.get("activeCaptionBorder"), "CheckBox.focusInputMap", new UIDefaults.LazyInputMap(new Object[]{"SPACE", "pressed", "released SPACE", "released"}), "RadioButton.margin", new InsetsUIResource(4, 2, 4, 2), "RadioButton.textIconGap", new Integer(8), "RadioButton.background", var1.get("control"), "RadioButton.foreground", var1.get("controlText"), "RadioButton.icon", var28, "RadioButton.focus", var1.get("activeCaptionBorder"), "RadioButton.icon", var28, "RadioButton.focusInputMap", new UIDefaults.LazyInputMap(new Object[]{"SPACE", "pressed", "released SPACE", "released"}), "ToggleButton.border", var21, "ToggleButton.background", var1.get("control"), "ToggleButton.foreground", var1.get("controlText"), "ToggleButton.focus", var1.get("controlText"), "ToggleButton.select", var1.get("controlLightShadow"), "ToggleButton.focusInputMap", new UIDefaults.LazyInputMap(new Object[]{"SPACE", "pressed", "released SPACE", "released"}), "Menu.border", var42, "Menu.font", var2, "Menu.acceleratorFont", var2, "Menu.acceleratorSelectionForeground", var13, "Menu.foreground", var1.get("menuText"), "Menu.background", var1.get("menu"), "Menu.selectionForeground", var13, "Menu.selectionBackground", var12, "Menu.checkIcon", var24, "Menu.arrowIcon", var26, "Menu.menuPopupOffsetX", new Integer(0), "Menu.menuPopupOffsetY", new Integer(0), "Menu.submenuPopupOffsetX", new Integer(-2), "Menu.submenuPopupOffsetY", new Integer(3), "Menu.shortcutKeys", new int[]{SwingUtilities2.getSystemMnemonicKeyMask(), 4}, "Menu.cancelMode", "hideMenuTree", "MenuBar.border", var41, "MenuBar.background", var1.get("menu"), "MenuBar.foreground", var1.get("menuText"), "MenuBar.font", var2, "MenuBar.windowBindings", new Object[]{"F10", "takeFocus"}, "MenuItem.border", var42, "MenuItem.font", var2, "MenuItem.acceleratorFont", var2, "MenuItem.acceleratorSelectionForeground", var13, "MenuItem.foreground", var1.get("menuText"), "MenuItem.background", var1.get("menu"), "MenuItem.selectionForeground", var13, "MenuItem.selectionBackground", var12, "MenuItem.checkIcon", var24, "MenuItem.arrowIcon", var25, "RadioButtonMenuItem.border", var42, "RadioButtonMenuItem.font", var2, "RadioButtonMenuItem.acceleratorFont", var2, "RadioButtonMenuItem.acceleratorSelectionForeground", var13, "RadioButtonMenuItem.foreground", var1.get("menuText"), "RadioButtonMenuItem.background", var1.get("menu"), "RadioButtonMenuItem.selectionForeground", var13, "RadioButtonMenuItem.selectionBackground", var12, "RadioButtonMenuItem.checkIcon", var28, "RadioButtonMenuItem.arrowIcon", var25, "CheckBoxMenuItem.border", var42, "CheckBoxMenuItem.font", var2, "CheckBoxMenuItem.acceleratorFont", var2, "CheckBoxMenuItem.acceleratorSelectionForeground", var13, "CheckBoxMenuItem.foreground", var1.get("menuText"), "CheckBoxMenuItem.background", var1.get("menu"), "CheckBoxMenuItem.selectionForeground", var13, "CheckBoxMenuItem.selectionBackground", var12, "CheckBoxMenuItem.checkIcon", var27, "CheckBoxMenuItem.arrowIcon", var25, "PopupMenu.background", var1.get("menu"), "PopupMenu.border", var23, "PopupMenu.foreground", var1.get("menuText"), "PopupMenu.font", var2, "PopupMenu.consumeEventOnClose", Boolean.TRUE, "Label.font", var2, "Label.background", var1.get("control"), "Label.foreground", var1.get("controlText"), "Separator.shadow", var1.get("controlShadow"), "Separator.highlight", var1.get("controlLtHighlight"), "Separator.background", var1.get("controlLtHighlight"), "Separator.foreground", var1.get("controlShadow"), "List.focusCellHighlightBorder", var43, "List.focusInputMap", new UIDefaults.LazyInputMap(new Object[]{"COPY", "copy", "PASTE", "paste", "CUT", "cut", "control INSERT", "copy", "shift INSERT", "paste", "shift DELETE", "cut", "UP", "selectPreviousRow", "KP_UP", "selectPreviousRow", "shift UP", "selectPreviousRowExtendSelection", "shift KP_UP", "selectPreviousRowExtendSelection", "ctrl shift UP", "selectPreviousRowExtendSelection", "ctrl shift KP_UP", "selectPreviousRowExtendSelection", "ctrl UP", "selectPreviousRowChangeLead", "ctrl KP_UP", "selectPreviousRowChangeLead", "DOWN", "selectNextRow", "KP_DOWN", "selectNextRow", "shift DOWN", "selectNextRowExtendSelection", "shift KP_DOWN", "selectNextRowExtendSelection", "ctrl shift DOWN", "selectNextRowExtendSelection", "ctrl shift KP_DOWN", "selectNextRowExtendSelection", "ctrl DOWN", "selectNextRowChangeLead", "ctrl KP_DOWN", "selectNextRowChangeLead", "LEFT", "selectPreviousColumn", "KP_LEFT", "selectPreviousColumn", "shift LEFT", "selectPreviousColumnExtendSelection", "shift KP_LEFT", "selectPreviousColumnExtendSelection", "ctrl shift LEFT", "selectPreviousColumnExtendSelection", "ctrl shift KP_LEFT", "selectPreviousColumnExtendSelection", "ctrl LEFT", "selectPreviousColumnChangeLead", "ctrl KP_LEFT", "selectPreviousColumnChangeLead", "RIGHT", "selectNextColumn", "KP_RIGHT", "selectNextColumn", "shift RIGHT", "selectNextColumnExtendSelection", "shift KP_RIGHT", "selectNextColumnExtendSelection", "ctrl shift RIGHT", "selectNextColumnExtendSelection", "ctrl shift KP_RIGHT", "selectNextColumnExtendSelection", "ctrl RIGHT", "selectNextColumnChangeLead", "ctrl KP_RIGHT", "selectNextColumnChangeLead", "HOME", "selectFirstRow", "shift HOME", "selectFirstRowExtendSelection", "ctrl shift HOME", "selectFirstRowExtendSelection", "ctrl HOME", "selectFirstRowChangeLead", "END", "selectLastRow", "shift END", "selectLastRowExtendSelection", "ctrl shift END", "selectLastRowExtendSelection", "ctrl END", "selectLastRowChangeLead", "PAGE_UP", "scrollUp", "shift PAGE_UP", "scrollUpExtendSelection", "ctrl shift PAGE_UP", "scrollUpExtendSelection", "ctrl PAGE_UP", "scrollUpChangeLead", "PAGE_DOWN", "scrollDown", "shift PAGE_DOWN", "scrollDownExtendSelection", "ctrl shift PAGE_DOWN", "scrollDownExtendSelection", "ctrl PAGE_DOWN", "scrollDownChangeLead", "ctrl A", "selectAll", "ctrl SLASH", "selectAll", "ctrl BACK_SLASH", "clearSelection", "SPACE", "addToSelection", "ctrl SPACE", "toggleAndAnchor", "shift SPACE", "extendTo", "ctrl shift SPACE", "moveSelectionTo"}), "DesktopIcon.icon", SwingUtilities2.makeIcon(this.getClass(), MotifLookAndFeel.class, "icons/DesktopIcon.gif"), "DesktopIcon.border", null, "DesktopIcon.windowBindings", new Object[]{"ESCAPE", "hideSystemMenu"}, "InternalFrame.activeTitleBackground", var1.get("activeCaptionBorder"), "InternalFrame.inactiveTitleBackground", var1.get("inactiveCaptionBorder"), "InternalFrame.windowBindings", new Object[]{"shift ESCAPE", "showSystemMenu", "ctrl SPACE", "showSystemMenu", "ESCAPE", "hideSystemMenu"}, "ScrollBar.background", var10, "ScrollBar.foreground", var1.get("control"), "ScrollBar.track", var10, "ScrollBar.trackHighlight", var1.get("controlDkShadow"), "ScrollBar.thumb", var1.get("control"), "ScrollBar.thumbHighlight", var1.get("controlHighlight"), "ScrollBar.thumbDarkShadow", var1.get("controlDkShadow"), "ScrollBar.thumbShadow", var1.get("controlShadow"), "ScrollBar.border", var14, "ScrollBar.allowsAbsolutePositioning", Boolean.TRUE, "ScrollBar.ancestorInputMap", new UIDefaults.LazyInputMap(new Object[]{"RIGHT", "positiveUnitIncrement", "KP_RIGHT", "positiveUnitIncrement", "DOWN", "positiveUnitIncrement", "KP_DOWN", "positiveUnitIncrement", "PAGE_DOWN", "positiveBlockIncrement", "ctrl PAGE_DOWN", "positiveBlockIncrement", "LEFT", "negativeUnitIncrement", "KP_LEFT", "negativeUnitIncrement", "UP", "negativeUnitIncrement", "KP_UP", "negativeUnitIncrement", "PAGE_UP", "negativeBlockIncrement", "ctrl PAGE_UP", "negativeBlockIncrement", "HOME", "minScroll", "END", "maxScroll"}), "ScrollPane.font", var2, "ScrollPane.background", var1.get("control"), "ScrollPane.foreground", var1.get("controlText"), "ScrollPane.border", null, "ScrollPane.viewportBorder", var14, "ScrollPane.ancestorInputMap", new UIDefaults.LazyInputMap(new Object[]{"RIGHT", "unitScrollRight", "KP_RIGHT", "unitScrollRight", "DOWN", "unitScrollDown", "KP_DOWN", "unitScrollDown", "LEFT", "unitScrollLeft", "KP_LEFT", "unitScrollLeft", "UP", "unitScrollUp", "KP_UP", "unitScrollUp", "PAGE_UP", "scrollUp", "PAGE_DOWN", "scrollDown", "ctrl PAGE_UP", "scrollLeft", "ctrl PAGE_DOWN", "scrollRight", "ctrl HOME", "scrollHome", "ctrl END", "scrollEnd"}), "Slider.font", var2, "Slider.border", var18, "Slider.foreground", var1.get("control"), "Slider.background", var10, "Slider.highlight", var1.get("controlHighlight"), "Slider.shadow", var1.get("controlShadow"), "Slider.focus", var1.get("controlDkShadow"), "Slider.focusInsets", var44, "Slider.focusInputMap", new UIDefaults.LazyInputMap(new Object[]{"RIGHT", "positiveUnitIncrement", "KP_RIGHT", "positiveUnitIncrement", "DOWN", "negativeUnitIncrement", "KP_DOWN", "negativeUnitIncrement", "ctrl PAGE_DOWN", "negativeBlockIncrement", "LEFT", "negativeUnitIncrement", "KP_LEFT", "negativeUnitIncrement", "UP", "positiveUnitIncrement", "KP_UP", "positiveUnitIncrement", "ctrl PAGE_UP", "positiveBlockIncrement", "HOME", "minScroll", "END", "maxScroll"}), "Spinner.ancestorInputMap", new UIDefaults.LazyInputMap(new Object[]{"UP", "increment", "KP_UP", "increment", "DOWN", "decrement", "KP_DOWN", "decrement"}), "Spinner.border", var22, "SplitPane.background", var1.get("control"), "SplitPane.highlight", var1.get("controlHighlight"), "SplitPane.shadow", var1.get("controlShadow"), "SplitPane.dividerSize", 20, "SplitPane.activeThumb", var1.get("activeCaptionBorder"), "SplitPane.ancestorInputMap", new UIDefaults.LazyInputMap(new Object[]{"UP", "negativeIncrement", "DOWN", "positiveIncrement", "LEFT", "negativeIncrement", "RIGHT", "positiveIncrement", "KP_UP", "negativeIncrement", "KP_DOWN", "positiveIncrement", "KP_LEFT", "negativeIncrement", "KP_RIGHT", "positiveIncrement", "HOME", "selectMin", "END", "selectMax", "F8", "startResize", "F6", "toggleFocus", "ctrl TAB", "focusOutForward", "ctrl shift TAB", "focusOutBackward"}), "TabbedPane.font", var2, "TabbedPane.background", var1.get("control"), "TabbedPane.foreground", var1.get("controlText"), "TabbedPane.light", var1.get("controlHighlight"), "TabbedPane.highlight", var1.get("controlLtHighlight"), "TabbedPane.shadow", var1.get("controlShadow"), "TabbedPane.darkShadow", var1.get("controlShadow"), "TabbedPane.unselectedTabBackground", var29, "TabbedPane.unselectedTabForeground", var30, "TabbedPane.unselectedTabHighlight", var32, "TabbedPane.unselectedTabShadow", var31, "TabbedPane.focus", var1.get("activeCaptionBorder"), "TabbedPane.tabInsets", var45, "TabbedPane.selectedTabPadInsets", var46, "TabbedPane.tabAreaInsets", var47, "TabbedPane.contentBorderInsets", var48, "TabbedPane.focusInputMap", new UIDefaults.LazyInputMap(new Object[]{"RIGHT", "navigateRight", "KP_RIGHT", "navigateRight", "LEFT", "navigateLeft", "KP_LEFT", "navigateLeft", "UP", "navigateUp", "KP_UP", "navigateUp", "DOWN", "navigateDown", "KP_DOWN", "navigateDown", "ctrl DOWN", "requestFocusForVisibleComponent", "ctrl KP_DOWN", "requestFocusForVisibleComponent"}), "TabbedPane.ancestorInputMap", new UIDefaults.LazyInputMap(new Object[]{"ctrl PAGE_DOWN", "navigatePageDown", "ctrl PAGE_UP", "navigatePageUp", "ctrl UP", "requestFocus", "ctrl KP_UP", "requestFocus"}), "Tree.background", var10, "Tree.hash", var1.get("controlDkShadow"), "Tree.iconShadow", var1.get("controlShadow"), "Tree.iconHighlight", var1.get("controlHighlight"), "Tree.iconBackground", var1.get("control"), "Tree.iconForeground", var1.get("controlShadow"), "Tree.textBackground", var10, "Tree.textForeground", var1.get("textText"), "Tree.selectionBackground", var1.get("text"), "Tree.selectionForeground", var1.get("textText"), "Tree.selectionBorderColor", var1.get("activeCaptionBorder"), "Tree.openIcon", var36, "Tree.closedIcon", var37, "Tree.leafIcon", var38, "Tree.expandedIcon", var39, "Tree.collapsedIcon", var40, "Tree.editorBorder", var17, "Tree.editorBorderSelectionColor", var1.get("activeCaptionBorder"), "Tree.rowHeight", new Integer(18), "Tree.drawsFocusBorderAroundIcon", Boolean.TRUE, "Tree.focusInputMap", new UIDefaults.LazyInputMap(new Object[]{"COPY", "copy", "PASTE", "paste", "CUT", "cut", "control INSERT", "copy", "shift INSERT", "paste", "shift DELETE", "cut", "UP", "selectPrevious", "KP_UP", "selectPrevious", "shift UP", "selectPreviousExtendSelection", "shift KP_UP", "selectPreviousExtendSelection", "ctrl shift UP", "selectPreviousExtendSelection", "ctrl shift KP_UP", "selectPreviousExtendSelection", "ctrl UP", "selectPreviousChangeLead", "ctrl KP_UP", "selectPreviousChangeLead", "DOWN", "selectNext", "KP_DOWN", "selectNext", "shift DOWN", "selectNextExtendSelection", "shift KP_DOWN", "selectNextExtendSelection", "ctrl shift DOWN", "selectNextExtendSelection", "ctrl shift KP_DOWN", "selectNextExtendSelection", "ctrl DOWN", "selectNextChangeLead", "ctrl KP_DOWN", "selectNextChangeLead", "RIGHT", "selectChild", "KP_RIGHT", "selectChild", "LEFT", "selectParent", "KP_LEFT", "selectParent", "PAGE_UP", "scrollUpChangeSelection", "shift PAGE_UP", "scrollUpExtendSelection", "ctrl shift PAGE_UP", "scrollUpExtendSelection", "ctrl PAGE_UP", "scrollUpChangeLead", "PAGE_DOWN", "scrollDownChangeSelection", "shift PAGE_DOWN", "scrollDownExtendSelection", "ctrl shift PAGE_DOWN", "scrollDownExtendSelection", "ctrl PAGE_DOWN", "scrollDownChangeLead", "HOME", "selectFirst", "shift HOME", "selectFirstExtendSelection", "ctrl shift HOME", "selectFirstExtendSelection", "ctrl HOME", "selectFirstChangeLead", "END", "selectLast", "shift END", "selectLastExtendSelection", "ctrl shift END", "selectLastExtendSelection", "ctrl END", "selectLastChangeLead", "F2", "startEditing", "ctrl A", "selectAll", "ctrl SLASH", "selectAll", "ctrl BACK_SLASH", "clearSelection", "ctrl LEFT", "scrollLeft", "ctrl KP_LEFT", "scrollLeft", "ctrl RIGHT", "scrollRight", "ctrl KP_RIGHT", "scrollRight", "SPACE", "addToSelection", "ctrl SPACE", "toggleAndAnchor", "shift SPACE", "extendTo", "ctrl shift SPACE", "moveSelectionTo"}), "Tree.ancestorInputMap", new UIDefaults.LazyInputMap(new Object[]{"ESCAPE", "cancel"}), "Table.focusCellHighlightBorder", var43, "Table.scrollPaneBorder", null, "Table.dropLineShortColor", var1.get("activeCaptionBorder"), "Table.ancestorInputMap", new UIDefaults.LazyInputMap(new Object[]{"COPY", "copy", "PASTE", "paste", "CUT", "cut", "control INSERT", "copy", "shift INSERT", "paste", "shift DELETE", "cut", "RIGHT", "selectNextColumn", "KP_RIGHT", "selectNextColumn", "shift RIGHT", "selectNextColumnExtendSelection", "shift KP_RIGHT", "selectNextColumnExtendSelection", "ctrl shift RIGHT", "selectNextColumnExtendSelection", "ctrl shift KP_RIGHT", "selectNextColumnExtendSelection", "ctrl RIGHT", "selectNextColumnChangeLead", "ctrl KP_RIGHT", "selectNextColumnChangeLead", "LEFT", "selectPreviousColumn", "KP_LEFT", "selectPreviousColumn", "shift LEFT", "selectPreviousColumnExtendSelection", "shift KP_LEFT", "selectPreviousColumnExtendSelection", "ctrl shift LEFT", "selectPreviousColumnExtendSelection", "ctrl shift KP_LEFT", "selectPreviousColumnExtendSelection", "ctrl LEFT", "selectPreviousColumnChangeLead", "ctrl KP_LEFT", "selectPreviousColumnChangeLead", "DOWN", "selectNextRow", "KP_DOWN", "selectNextRow", "shift DOWN", "selectNextRowExtendSelection", "shift KP_DOWN", "selectNextRowExtendSelection", "ctrl shift DOWN", "selectNextRowExtendSelection", "ctrl shift KP_DOWN", "selectNextRowExtendSelection", "ctrl DOWN", "selectNextRowChangeLead", "ctrl KP_DOWN", "selectNextRowChangeLead", "UP", "selectPreviousRow", "KP_UP", "selectPreviousRow", "shift UP", "selectPreviousRowExtendSelection", "shift KP_UP", "selectPreviousRowExtendSelection", "ctrl shift UP", "selectPreviousRowExtendSelection", "ctrl shift KP_UP", "selectPreviousRowExtendSelection", "ctrl UP", "selectPreviousRowChangeLead", "ctrl KP_UP", "selectPreviousRowChangeLead", "HOME", "selectFirstColumn", "shift HOME", "selectFirstColumnExtendSelection", "ctrl shift HOME", "selectFirstRowExtendSelection", "ctrl HOME", "selectFirstRow", "END", "selectLastColumn", "shift END", "selectLastColumnExtendSelection", "ctrl shift END", "selectLastRowExtendSelection", "ctrl END", "selectLastRow", "PAGE_UP", "scrollUpChangeSelection", "shift PAGE_UP", "scrollUpExtendSelection", "ctrl shift PAGE_UP", "scrollLeftExtendSelection", "ctrl PAGE_UP", "scrollLeftChangeSelection", "PAGE_DOWN", "scrollDownChangeSelection", "shift PAGE_DOWN", "scrollDownExtendSelection", "ctrl shift PAGE_DOWN", "scrollRightExtendSelection", "ctrl PAGE_DOWN", "scrollRightChangeSelection", "TAB", "selectNextColumnCell", "shift TAB", "selectPreviousColumnCell", "ENTER", "selectNextRowCell", "shift ENTER", "selectPreviousRowCell", "ctrl A", "selectAll", "ctrl SLASH", "selectAll", "ctrl BACK_SLASH", "clearSelection", "ESCAPE", "cancel", "F2", "startEditing", "SPACE", "addToSelection", "ctrl SPACE", "toggleAndAnchor", "shift SPACE", "extendTo", "ctrl shift SPACE", "moveSelectionTo", "F8", "focusHeader"}), "FormattedTextField.focusInputMap", new UIDefaults.LazyInputMap(new Object[]{"ctrl C", "copy-to-clipboard", "ctrl V", "paste-from-clipboard", "ctrl X", "cut-to-clipboard", "COPY", "copy-to-clipboard", "PASTE", "paste-from-clipboard", "CUT", "cut-to-clipboard", "shift LEFT", "selection-backward", "shift KP_LEFT", "selection-backward", "shift RIGHT", "selection-forward", "shift KP_RIGHT", "selection-forward", "ctrl LEFT", "caret-previous-word", "ctrl KP_LEFT", "caret-previous-word", "ctrl RIGHT", "caret-next-word", "ctrl KP_RIGHT", "caret-next-word", "ctrl shift LEFT", "selection-previous-word", "ctrl shift KP_LEFT", "selection-previous-word", "ctrl shift RIGHT", "selection-next-word", "ctrl shift KP_RIGHT", "selection-next-word", "ctrl A", "select-all", "HOME", "caret-begin-line", "END", "caret-end-line", "shift HOME", "selection-begin-line", "shift END", "selection-end-line", "BACK_SPACE", "delete-previous", "shift BACK_SPACE", "delete-previous", "ctrl H", "delete-previous", "DELETE", "delete-next", "ctrl DELETE", "delete-next-word", "ctrl BACK_SPACE", "delete-previous-word", "RIGHT", "caret-forward", "LEFT", "caret-backward", "KP_RIGHT", "caret-forward", "KP_LEFT", "caret-backward", "ENTER", "notify-field-accept", "ctrl BACK_SLASH", "unselect", "control shift O", "toggle-componentOrientation", "ESCAPE", "reset-field-edit", "UP", "increment", "KP_UP", "increment", "DOWN", "decrement", "KP_DOWN", "decrement"}), "ToolBar.ancestorInputMap", new UIDefaults.LazyInputMap(new Object[]{"UP", "navigateUp", "KP_UP", "navigateUp", "DOWN", "navigateDown", "KP_DOWN", "navigateDown", "LEFT", "navigateLeft", "KP_LEFT", "navigateLeft", "RIGHT", "navigateRight", "KP_RIGHT", "navigateRight"}), "ComboBox.control", var1.get("control"), "ComboBox.controlForeground", var7, "ComboBox.background", var1.get("window"), "ComboBox.foreground", var7, "ComboBox.border", var19, "ComboBox.selectionBackground", var7, "ComboBox.selectionForeground", var1.get("text"), "ComboBox.disabledBackground", var1.get("control"), "ComboBox.disabledForeground", var1.get("textInactiveText"), "ComboBox.font", var2, "ComboBox.ancestorInputMap", new UIDefaults.LazyInputMap(new Object[]{"ESCAPE", "hidePopup", "PAGE_UP", "pageUpPassThrough", "PAGE_DOWN", "pageDownPassThrough", "HOME", "homePassThrough", "END", "endPassThrough", "DOWN", "selectNext", "KP_DOWN", "selectNext", "UP", "selectPrevious", "KP_UP", "selectPrevious", "SPACE", "spacePopup", "ENTER", "enterPressed"}), "TextField.caretForeground", var7, "TextField.caretBlinkRate", 500, "TextField.inactiveForeground", var1.get("textInactiveText"), "TextField.selectionBackground", var1.get("textHighlight"), "TextField.selectionForeground", var1.get("textHighlightText"), "TextField.background", var1.get("window"), "TextField.foreground", var1.get("textText"), "TextField.font", var4, "TextField.border", var22, "TextField.focusInputMap", var33, "PasswordField.caretForeground", var7, "PasswordField.caretBlinkRate", 500, "PasswordField.inactiveForeground", var1.get("textInactiveText"), "PasswordField.selectionBackground", var1.get("textHighlight"), "PasswordField.selectionForeground", var1.get("textHighlightText"), "PasswordField.background", var1.get("window"), "PasswordField.foreground", var1.get("textText"), "PasswordField.font", var5, "PasswordField.border", var22, "PasswordField.focusInputMap", var34, "TextArea.caretForeground", var7, "TextArea.caretBlinkRate", 500, "TextArea.inactiveForeground", var1.get("textInactiveText"), "TextArea.selectionBackground", var1.get("textHighlight"), "TextArea.selectionForeground", var1.get("textHighlightText"), "TextArea.background", var1.get("window"), "TextArea.foreground", var1.get("textText"), "TextArea.font", var5, "TextArea.border", var16, "TextArea.focusInputMap", var35, "TextPane.caretForeground", var7, "TextPane.caretBlinkRate", 500, "TextPane.inactiveForeground", var1.get("textInactiveText"), "TextPane.selectionBackground", var9, "TextPane.selectionForeground", var1.get("textHighlightText"), "TextPane.background", var8, "TextPane.foreground", var1.get("textText"), "TextPane.font", var3, "TextPane.border", var16, "TextPane.focusInputMap", var35, "EditorPane.caretForeground", var6, "EditorPane.caretBlinkRate", 500, "EditorPane.inactiveForeground", var1.get("textInactiveText"), "EditorPane.selectionBackground", var9, "EditorPane.selectionForeground", var1.get("textHighlightText"), "EditorPane.background", var8, "EditorPane.foreground", var1.get("textText"), "EditorPane.font", var3, "EditorPane.border", var16, "EditorPane.focusInputMap", var35, "FileChooser.ancestorInputMap", new UIDefaults.LazyInputMap(new Object[]{"ESCAPE", "cancelSelection"}), "ToolTip.border", var15, "ToolTip.background", var1.get("info"), "ToolTip.foreground", var1.get("infoText"), "PopupMenu.selectedWindowInputMapBindings", new Object[]{"ESCAPE", "cancel", "TAB", "cancel", "shift TAB", "cancel", "DOWN", "selectNext", "KP_DOWN", "selectNext", "UP", "selectPrevious", "KP_UP", "selectPrevious", "LEFT", "selectParent", "KP_LEFT", "selectParent", "RIGHT", "selectChild", "KP_RIGHT", "selectChild", "ENTER", "return", "SPACE", "return"}, "OptionPane.border", var49, "OptionPane.messageAreaBorder", var51, "OptionPane.buttonAreaBorder", var50, "OptionPane.errorIcon", SwingUtilities2.makeIcon(this.getClass(), MotifLookAndFeel.class, "icons/Error.gif"), "OptionPane.informationIcon", SwingUtilities2.makeIcon(this.getClass(), MotifLookAndFeel.class, "icons/Inform.gif"), "OptionPane.warningIcon", SwingUtilities2.makeIcon(this.getClass(), MotifLookAndFeel.class, "icons/Warn.gif"), "OptionPane.questionIcon", SwingUtilities2.makeIcon(this.getClass(), MotifLookAndFeel.class, "icons/Question.gif"), "OptionPane.windowBindings", new Object[]{"ESCAPE", "close"}, "RootPane.defaultButtonWindowKeyBindings", new Object[]{"ENTER", "press", "released ENTER", "release", "ctrl ENTER", "press", "ctrl released ENTER", "release"}};
      var1.putDefaults(var52);
   }
}
